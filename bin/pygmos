#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import (absolute_import, division, print_function)

import os
import sys
import time
try:
    from astropy.io import fits as pyfits
except ImportError:
    import pyfits

from pyraf import iraf
from iraf import gemini
from iraf import gemtools
from iraf import gmos

"""
PyGMOS
"""

# Other packages provided with the code:
from pygmos import (check_gswave, inventory, paramtools, reduction, tasks,
                    utils)

# complementary files will be located in the pygmos folder so need to
# define the environment
pygmos_path = os.path.dirname(os.path.split(
    inventory.__file__.replace('inventory.pyc', ''))[0])
os.environ['pygmos_path'] = pygmos_path

# Cosmic ray removal task (van Dokkum 2001, PASP, 113, 1420)
iraf.task(lacos_spec=os.path.join(
    pygmos_path, 'pygmos', 'lacos_spec.cl'))


def main():
    """
    The pipeline itself. Reduces a set of GMOS spectra (MOS or
    longslit) given the name of the object and, optionally, the
    number(s) of the mask(s) wanted.

    """
    args = paramtools.read_args()

    print(utils.intro)

    masks = inventory.run(args)
    if args.inventory_only:
        print()
        return

    # after running the inventory, the bias has been linked to the
    # working directory. Again, this should be removed once issue #11
    # is implemented
    args.bias = os.path.split(args.bias)[1]

    paramtools.read_iraf_params(args)
    # open DS9?
    if args.ds9:
        os.system('ds9 &')
    # GMOS display format
    iraf.set(stdimage='imtgmos')
    if args.align:
        iraf.task(align=os.path.join(pygmos_path, 'align.cl'))

    assoc = '{0}.assoc'.format(args.objectid)
    waves = utils.get_wavelengths(assoc)
    print('\nObject:', args.objectid)

    if args.nod:
        print('Reducing Nod-and-Shuffle observations. Remember that the')
        print('bias image must be overscan subtracted (interactively).')

    print(args.masks, masks)
    if args.masks == 'longslit':
        gmos.gsreduce.mdfdir = 'gmos$data'
        gmos.gsflat.mdfdir = 'gmos$data'
        reduction.longslit(args, waves, assoc)
    else:
        for mask in masks:
            science = utils.get_science_files(assoc, mask)
            reduction.mos(args, mask, science, assoc)
    return


def run_inventory(args):
    # Default value if nothing was specified in the console
    if args.masks == 'all':
        if args.read_inventory:
            masks = sorted(
                inventory.read(args.objectid, gmos.gsreduce.bias))
        else:
            masks = sorted(inventory.generate(
                args, '', args.objectid, gmos.gsreduce.bias, args.path))
        args.masks = [str(m) for m in masks]
    elif args.masks == 'longslit':
        inventory.generate(
            args, args.program, args.objectid, gmos.gsreduce.bias, args.path,
            masktype=args.masks)
    # when MOS masks are specified
    else:
        if args.read_inventory:
            inventory.read(args.objectid, gmos.gsreduce.bias)
        else:
            inventory.generate(args, args.program, args.objectid, args.path,
            gmos.gsreduce.bias)
    return masks


if __name__ == '__main__':
    t0 = time.time()
    main()
    print('\nTotal execution time {0:.1f} min'.format(
        ((time.time() - t0) / 60)))

