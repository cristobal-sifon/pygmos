#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import (absolute_import, division, print_function)

import os
import sys
from time import sleep, time
import sys
try:
    from astropy.io import fits as pyfits
except ImportError:
    import pyfits

if sys.version_info[0] == 2:
    from pyraf import iraf
    from iraf import gemini
    from iraf import gemtools
    from iraf import gmos
    can_reduce = True
else:
    import warnings
    warning_py36 = \
        'You are using Python {0}. Due to IRAF/PyRAF system requirements,' \
        ' the data reduction capabilities of pygmos are only available for' \
        ' Python 2.7 versions. You may still use the inventory and plotting' \
        ' routines of pygmos.'.format('.'.join(sys.version_info))
        warnings.warn(warning_py36)
    can_reduce = False

"""
PyGMOS
"""

# Other packages provided with the code
if can_reduce:
    from pygmos import (check_gswave, inventory, paramtools, reduction, tasks,
                        utils)

# complementary files will be located in the pygmos folder so need to
# define the environment
pygmos_path = os.path.dirname(os.path.split(
    inventory.__file__.replace('inventory.pyc', ''))[0])
os.environ['pygmos_path'] = pygmos_path

# Cosmic ray removal task (van Dokkum 2001, PASP, 113, 1420)
if can_reduce:
    iraf.task(lacos_spec=os.path.join(pygmos_path, 'pygmos', 'lacos_spec.cl'))


def main():
    """
    The pipeline itself. Reduces a set of GMOS spectra (MOS or
    longslit) given the name of the object and, optionally, the
    number(s) of the mask(s) wanted.

    """
    args = paramtools.read_args()

    masks = inventory.run(args)
    if args.inventory_only or args.objectid == 'inventory' \
            or can_reduce is False:
        print()
        return

    print(utils.intro)

    # after running the inventory, the bias has been linked to the
    # working directory. Again, this should be removed once issue #11
    # is implemented
    args.bias = os.path.split(args.bias)[1]

    paramtools.read_iraf_params(args)
    # open DS9?
    if args.ds9:
        os.system('ds9 &')
        if args.begin:
            print('Giving ds9 10 seconds to open...')
            sleep(10)
    # GMOS display format
    iraf.set(stdimage='imtgmos')
    if args.align:
        iraf.task(align=os.path.join(pygmos_path, 'align.cl'))

    assoc = '{0}.assoc'.format(args.objectid)
    waves = utils.get_wavelengths(assoc)
    print('\nObject:', args.objectid)

    if args.nod:
        print('Reducing Nod-and-Shuffle observations. Remember that the')
        print('bias image must be overscan subtracted (interactively).')

    if args.masks == 'longslit':
        gmos.gsreduce.mdfdir = 'gmos$data'
        gmos.gsflat.mdfdir = 'gmos$data'
        reduction.longslit(args, waves, assoc)
    else:
        for mask in masks:
            science = utils.get_science_files(assoc, mask)
            reduction.mos(args, mask, science, assoc)
    return


if __name__ == '__main__':
    to = time()
    main()
    print('\nTotal execution time {0:.1f} min'.format(((time()-to) / 60)))

