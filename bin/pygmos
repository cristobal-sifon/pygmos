#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

import glob
import os
try:
    from astropy.io import fits as pyfits
except ImportError:
    import pyfits
import sys
import time
#from pyraf import iraf
#from iraf import gemini
#from iraf import gemtools
#from iraf import gmos

"""
PyGMOS
"""

# Other packages provided with the code:
from pygmos import check_gswave
from pygmos import inventory

sys.exit()

# complementary files will be located in the pygmos folder so need to
# define the environment
pygmos_path = inventory.__file__.replace('inventory.pyc', '')
os.environ['pygmos_path'] = pygmos_path

# help file and others
if '-h' in sys.argv or '--help' in sys.argv:
    filename = os.path.join(pygmos_path, 'pygmos.hlp')
    if not os.path.isfile(filename):
        pygmos_path = '/'.join(pygmos_path.split('/')[:-1])
    filename = os.path.join(pygmos_path, 'pygmos.hlp')
    f = open(filename)
    for l in f:
        print(l.replace('\n', ''))
    sys.exit()
if '-l' in sys.argv:
    os.system('cp %s .' %os.path.join(pygmos_path, 'CuAr_GMOS.dat'))
    print('Copied CuAr line list (CuAr_GMOS.dat) to current directory.')
    sys.exit()
if '-dd' in sys.argv or '-e' in sys.argv:
    f = open(os.path.join(pygmos_path, 'pygmos.params.extended'))
    for l in f:
        print(l.replace('\n', ''))
    sys.exit()
if '-d' in sys.argv:
    f = open(os.path.join(pygmos_path, 'pygmos.params'))
    for l in f:
        print(l.replace('\n', ''))
    sys.exit()

# Cosmic ray removal task (van Dokkum 2001, PASP, 113, 1420)
iraf.task(lacos_spec=os.path.join(pygmos_path,'lacos_spec.cl'))

def default_params():
    """
    Default parameters. Modify these if your usual setup is different. All these
    can also be modified from the command line.
    """
    align = False # make wavelength-aligned masks?
    cut = True # cut the spectra into single fits files?
    program = '' # only need to define it if there are files from more than
                # one GMOS program in the same folder
                # and you only want to reduce data from one of them
    # better not to modify within this file:
    masks = ['all']
    return align, cut, masks, program


def main():
    """
    The pipeline itself. Reduces a set of GMOS spectra (MOS or
    longslit) given the name of the object and, optionally, the
    number(s) of the mask(s) wanted.

    """
    intro()
    cluster, align, align_suffix, masks, cutdir, program = ReadParameters()

    cluster = cluster.replace(' ', '_')
    # Default value if nothing was specified in the console
    if masks == ['all']:
        if '-r' in sys.argv:
            masks = sorted(inventory.read(cluster, gmos.gsreduce.bias))
        else:
            masks = sorted(inventory.main('', cluster, gmos.gsreduce.bias))
        masks = [str(m) for m in masks]
    elif masks in ('longslit', 'ls', 'long'):
        inventory.main(
            program, cluster, gmos.gsreduce.bias, masktype='longslit')
    else:
        if '-r' in sys.argv:
            inventory.read(cluster, gmos.gsreduce.bias)
        else:
            inventory.main(program, cluster, gmos.gsreduce.bias)
    if '-i' in sys.argv:
        print()
        exit()

    ReadIRAFParams()

    # open DS9?
    if 'ds9-' not in sys.argv:
        os.system('ds9 &')
    iraf.set(stdimage='imtgmos') # GMOS display format

    if align:
        iraf.task(align=os.path.join(pygmos_path,'align.cl'))

    assoc = cluster + '.assoc'
    waves = getWavelengths(assoc)
    print('\nObject:', cluster)

    # is it nod-and-shuffle?
    nod = False
    if '--nod-shuffle' in sys.argv:
        nod = True
    else:
        for argv in sys.argv:
            if (argv[0] == '-' and argv[1] != '-' and 's' in argv):
                nod = True
                break
    #if nod:
        #print('Reducing Nod-and-Shuffle observations. Remember that the')
        #print('bias image must be overscan subtracted (interactively).')

    if masks == 'longslit':
        gmos.gsreduce.mdfdir = 'gmos$/data'
        gmos.gsflat.mdfdir = 'gmos$/data'
        reduction.longslit(cluster, waves, assoc, ns=nod)
    else:
        for mask in masks:
            scienceFiles = getScienceFiles(assoc, mask)
            reduction.mos(
                cluster, mask, scienceFiles, assoc, cutdir, align,
                align_suffix, ns=nod)
    return


#----------------------------------------------------------------------------#

class reduction():
    def mos(self, cluster, mask, scienceFiles, assoc, cutdir,
            align=False, align_suffix='', ns=False):
        """
        The reduction process for MOS data. It goes through file identification,
        calibration and extraction of spectra.
        """
        Nmasks = 0.
        combine = []
        print('Mask', mask, '\n')
        path = os.path.join(cluster, 'mask' + mask)

        # nod-and-shuffle -- NOT YET IMPLEMENTED
        if ns:
            darks = getDarks()
            for science in scienceFiles.keys():
                arc = getFile(assoc, science, mask=int(mask), obs='arc',
                            wave=scienceFiles[science])
                # finding the arc is enough to know that the mask exists.
                if not arc:
                    print('Not enough data for mask {2} (science file {1})'.format(
                            mask, science))
                    continue
                Nmasks += 1. / len(scienceFiles.keys()) # all observations sum 1
                #arc = getFile(assoc, science, mask = int(mask), obs = 'arc',
                                #wave = scienceFiles[science])
                Copy_MDF(science, cluster, str(mask))
                iraf.chdir(path)

                dark = tasks.Call_gbias(darks, fl_over='no', fl_trim='yes',
                                        fl_vardq='no', fl_inter='no', median='no')
                science = tasks.Call_gprepare(science, fl_vardq='no',
                                                fl_addmdf='yes')
                science = tasks.Call_gireduce(science, bias=dark, fl_over='no',
                                                fl_trim='yes', fl_bias='yes',
                                                fl_dark='no', fl_flat='no',
                                                fl_addmdf='no')
                sciwithsky = tasks.Call_gmosaic(science, fl_paste='no',
                                                geointer='linear',
                                                fl_fixpix='no', fl_clean='yes')
                science = tasks.Call_gnsskysub(science, fl_paste='no',
                                                fl_fixpix='no', fl_clean='yes',
                                                fl_fixnc='no')
                science = tasks.Call_gmosaic(science, fl_paste='no',
                                            geointer='linear', fl_fixpix='no',
                                            fl_clean='yes')
                offsetfile = write_offsets(inimages, 'offsets.dat')
                # SHOULD PROBABLY CREATE A BPM, see step 7 of Adam's notes
                # (skipping for now)
                #science = tasks.Call_imcombine(science, 
                
                #flat, comb = tasks.Call_gsflat(flat, fl_over = 'yes',
                                                #fl_inter = 'yes', fl_answer = 'yes')
                #arc = tasks.Call_gsreduce(arc, '', comb)
                #science = tasks.Call_gsreduce(science, '', comb, mode = 'ns1')
                #tasks.Call_gdisplay(science, 1)
                ##Nslits = getNslits(science)
                ##science = tasks.Call_lacos(science, Nslits)
                #science = tasks.Call_gnsskysub(science)
                #tasks.Call_gdisplay(science, 1)
                #tasks.Call_gswave(arc)
                #tasks.Call_gstransform(arc, arc)
                #science = tasks.Call_gsreduce(science, flat, '', mode = 'ns2')
                #science = tasks.Call_gstransform(science, arc)
                ##science = tasks.Call_gsreduce(science, flat, '', bias = False)
                ##if align:
                    ##tasks.Call_align(arc, align, Nslits)
                ##science = tasks.Call_gstransform(science, arc)
                ##if align:
                    ##tasks.Call_align(science, align_suffix, Nslits)
                    ##tasks.Call_gdisplay(science + align_suffix, 1)
                    ##science = tasks.Call_gnscombine(science, align_suffix)
                tasks.Call_gdisplay(science, 1)
                delete('tmp*')
                iraf.chdir('../..')

        # regular observations
        else:
            for science in scienceFiles.keys():
                flat = getFile(assoc, science, mask=int(mask),
                            obs='flat', wave=scienceFiles[science])
                # finding the flat is enough to know that the mask exists.
                if not flat:
                    print('Not enough data for mask {0} (science file {1})'.format(
                            mask, science))
                    continue
                Nmasks += 1. / len(scienceFiles.keys()) # all observations sum 1
                arc = getFile(assoc, science, mask=int(mask),
                                obs='arc', wave=scienceFiles[science])
                Copy_MDF(science, cluster, str(mask))
                iraf.chdir(path)

                flat, comb = tasks.Call_gsflat(flat)
                arc = tasks.Call_gsreduce(arc, flat, comb)
                science = tasks.Call_gsreduce(science, flat, comb)
                tasks.Call_gdisplay(science, 1)
                Nslits = getNslits(science)
                science = tasks.Call_lacos(science, Nslits)
                tasks.Call_gdisplay(science, 1)
                tasks.Call_gswave(arc)
                tasks.Call_gstransform(arc, arc)
                if align:
                    tasks.Call_align(arc, align, Nslits)
                science = tasks.Call_gstransform(science, arc)
                if align:
                    tasks.Call_align(science, align_suffix, Nslits)
                    tasks.Call_gdisplay(science + align_suffix, 1)
                    science = tasks.Call_gsskysub(science, align_suffix)
                    tasks.Call_gdisplay(science, 1)
                    combine.append(science)
                else:
                    tasks.Call_gdisplay(science, 1)
                    science = tasks.Call_gsskysub(science, '')
                    tasks.Call_gdisplay(science, 1)
                    combine.append(science)
                if len(combine) == len(scienceFiles.keys()):
                    added = tasks.Call_imcombine(cluster, str(mask), combine, Nslits)
                    tasks.Call_gdisplay(added, 1)
                    if '--no-extract' not in sys.argv:
                        spectra = tasks.Call_gsextract(cluster, str(mask))
                    if align:
                        aligned = tasks.Call_align(added, align, Nslits)
                        tasks.Call_gdisplay(aligned, 1)
                delete('tmp*')
                iraf.chdir('../..')

        # cut spectra
        if 'cut-' not in sys.argv and '--no-extract' not in sys.argv:
            tasks.Cut_spectra(cluster, str(mask), cutdir=cutdir, spec='2d')
            tasks.Cut_spectra(cluster, str(mask), cutdir=cutdir, spec='1d')
        check_gswave.main(cluster, mask, gmos.gswavelength.logfile,
                        'gswcheck.log')
        return Nmasks

    def longslit(self, cluster, waves, assoc, ns=False):
        combine = []
        mask = 'longslit'
        path = os.path.join(cluster.replace(' ', '_'), mask)
        for wave in waves:
            flat = getFile(assoc, mask=mask, obs='flat', wave=wave)
            # finding the flat is enough to know that the mask exists.
            if flat:
                arc = getFile(assoc, mask=mask, obs='arc', wave=wave)
                science = getFile(assoc, mask=mask, obs='science', wave=wave)
                iraf.chdir(path)
                flat, comb = tasks.Call_gsflat(flat)
                arc = tasks.Call_gsreduce(arc, flat, comb)
                science = tasks.Call_gsreduce(science, flat, comb)
                tasks.Call_gdisplay(science, 1)
                science = tasks.Call_lacos(science, longslit=True)
                tasks.Call_gdisplay(science, 1)
                tasks.Call_gswave(arc)
                tasks.Call_gstransform(arc, arc)

                science = tasks.Call_gstransform(science, arc)
                tasks.Call_gdisplay(science, 1)
                combine.append(tasks.Call_gsskysub(science))
                if len(combine) == len(waves):
                    added = tasks.Call_imcombine(cluster, str(mask), combine)
                    tasks.Call_gdisplay(added, 1)
            if '--no-extract' not in sys.argv:
                spectra = tasks.Call_gsextract(cluster, mask)
                Naps = raw_input('Number of apertures extracted: ')
                # In case you don't see the message after so many
                # consecutive "Enters"
                while Naps == '':
                    Naps = raw_input(
                        'Please enter number of apertures extracted: ')
                Naps = int(Naps)
                if 'cut-' not in sys.argv:
                    tasks.Cut_apertures(cluster, Naps)
                delete('tmp*')
                iraf.chdir('../..')
        return


reduction = reduction()


#--------------------------------------------------------------------------#


class tasks():
    """
    All tasks directly used in the reduction process. Tasks have been defined in
    the order that they should be executed.
    """
    def Call_gdisplay(self, image, frame):
        if 'ds9-' not in sys.argv:
            gmos.gdisplay(image, str(frame))
            print('Image', image, 'displayed in frame', frame)
        return

    def Call_gsflat(self, flat, fl_over='no', fl_inter='no', fl_answer='no'):
        RemovePreviousFiles(flat, filetype='flat')
        output = flat + '_flat'
        comb = flat + '_comb'
        gmos.gsflat(flat, output, combflat=comb, fl_over=fl_over,
                    fl_inter=fl_inter, fl_answer=fl_answer)
        if gmos.gsflat.fl_detec == 'yes':
            os.system('rm %s.fits' %(gmos.gmosaic.outpref + output))
            os.system('rm %s.fits' %(gmos.gmosaic.outpref + comb))
            gmos.gmosaic(output, fl_fixpix='yes', verbose='no',
                        logfile='gmosaic.log')
            gmos.gmosaic(comb, fl_fixpix='yes', verbose='no',
                        logfile='gmosaic.log')
            output = gmos.gmosaic.outpref + output
            comb = gmos.gmosaic.outpref + comb
        return output, comb

    def Call_gsreduce(self, img, flat='', grad='', mode='regular'):
        RemovePreviousFiles(img)
        if mode == 'regular':
            if flat:
                gmos.gsreduce(img, gradimage=grad, flatim=flat)
            # will happen when gsreducing the arcs and the first pass
            # of N&S science data
            else:
                gmos.gsreduce(img, fl_flat='no', gradimage=grad)
        elif mode == 'ns1':
            gmos.gsreduce(img, fl_over='no', fl_flat='no', fl_gmosaic='no',
                            fl_gsappwave='no', fl_cut='no', fl_title='no')
        elif mode == 'ns2':
            gmos.gsreduce.outpref = 'r'
            gmos.gsreduce(img, fl_fixpix='no', fl_trim='no', fl_bias='no',
                            fl_flat='no', fl_gsappwave='no', fl_cut='no',
                            fl_title='no', geointer='nearest')
        return gmos.gsreduce.outpref + img

    def Call_lacos(self, science, Nslits=0, longslit=False):
        print('-' * 30)
        print('Removing cosmic rays with LACos')
        head = pyfits.getheader(science + '.fits')
        gain = head['GAIN']
        rdnoise = head['RDNOISE']
        outfile = science + '_lacos.fits'
        delete(outfile)
        os.system('cp  -p ' + science + '.fits ' +  outfile)
        makedir('slits')
        if longslit:
            slit = science + '[sci,1]'
            outslit = 'slits/' + science + '_long'
            outmask = 'slits/' + science + '_longmask'
            iraf.lacos_spec(slit, outslit, outmask, gain=gain, readn=rdnoise)
            iraf.imcopy(outslit, outfile[:-5] + '[SCI,1,overwrite]', verbose='no')
        else:
            for i in range(1, Nslits + 1):
                j = str(i)
                slit = science + '[sci,' + j + ']'
                outslit = 'slits/' + science + '_' + j
                outmask = 'slits/' + science + '_mask' + j
                iraf.lacos_spec(slit, outslit, outmask, gain=gain, readn=rdnoise)
                iraf.imcopy(outslit, outfile[:-5] + '[SCI,' + j + ',overwrite]',
                            verbose='no')
        delete('lacos*')
        removedir('slits')
        print(outfile[:-5])
        print('-' * 30)
        return outfile[:-5]

    def Call_gswave(self, arc):
        print('-' * 30)
        print('Calling gswavelength on', arc)
        gmos.gswavelength(arc)
        print('-' * 30)
        return

    def Call_gstransform(self, image, arc):
        print('-' * 30)
        print('Calling gstransform')
        print(image, '-->', end=' ')
        if image[-5:] == 'lacos':
            out = gmos.gstransform.outpref + image[:-6]
        else:
            out = gmos.gstransform.outpref + image
        print(out)
        delete(out + '.fits')
        gmos.gstransform(image, outimage=out, wavtraname=arc)
        print('-' * 30)
        return out

    def Call_align(self, inimage, suffix, Nslits):
        print('-' * 30)
        print('Aligning spectra...')
        outimage = inimage + suffix
        print(inimage, '-->', outimage)
        os.system('cp ' + inimage + '.fits ' + outimage + '.fits')
        delete('shifted*')
        iraf.align(outimage)
        delete('shifted*')
        print('-' * 30)
        return outimage

    def Call_gsskysub(self, tgsfile, align=''):
        print('-' * 30)
        print('Calling gsskysub')
        print(' ', tgsfile + align, '-->', end=' ')
        out = gmos.gsskysub.outpref + tgsfile + align
        print(out)
        delete(out + '.fits')
        gmos.gsskysub(tgsfile + align, output=out)
        print('-' * 30)
        return out

    def Call_gnsskysub(self, inimages):
        print('-' * 30)
        print('Calling gnsskysub')
        print(' ', inimages, '-->', end=' ')
        out = gmos.gnsskysub.outpref + inimages
        print(out)
        delete(out + '.fits')
        gmos.gnsskysub(inimages)
        print('-' * 30)
        return out

    def Call_gnscombine(self, cluster, inimages, outimage=''):
        """
        INCOMPLETE
        """
        if not outimage:
            outimage = 'nsc-' + cluster

        print('-' * 30)
        print('Calling gnscombine')

        #write_offsets(inimages)
        print('0 0', file=open('offsets.dat', 'w'))

        print(' ', inimages, '-->', outimage)
        gmos.gnscombine.outimage = outimage
        delete(outimage + '.fits')
        gmos.gnscombine(inimages, 'offsets.dat', outimage,
                        outcheckim=outimage + '_cr', outmedsky=outimage + '_sky')
        print('-' * 30)
        return out

    def Call_imcombine(self, cluster, mask, im, Nslits=1):
        print('-' * 30)
        if mask == 'longslit':
            outimage = gmos.gsskysub.outpref + gmos.gstransform.outpref + \
                        gmos.gsreduce.outpref
            outimage += '-' + cluster.replace(' ', '_') + '_ls'
        else:
            outimage = gmos.gsskysub.outpref + gmos.gstransform.outpref + \
                        gmos.gsreduce.outpref
            outimage += '-' + cluster.replace(' ', '_') + '_mask' + mask
        print('Combining images', im, '-->', outimage)
        os.system('cp ' + im[0] + '.fits ' + outimage + '.fits')
        f = pyfits.open(im[0] + '.fits ')
        gain = float(f[0].header['GAINMULT'])
        rdnoise = float(f[0].header['RDNOISE'])
        f.close()
        for i in range(1, Nslits + 1):
            j = str(i)
            inslit = ''
            for jm in im:
                inslit = jm + '[sci,' + j + '],'
            inslit = inslit[:-1] # to remove the last ','
            outslit = outimage + '[sci,' + j + ',overwrite]'
            iraf.imcombine(inslit, output=outslit, gain=gain, rdnoise=rdnoise)
        print('-' * 30)
        return outimage

    def Call_gsextract(self, cluster, mask):
        if mask == 'longslit':
            infile = gmos.gsskysub.outpref + gmos.gstransform.outpref + \
                    gmos.gsreduce.outpref
            infile += '-' + cluster.replace(' ', '_') + '_ls'
        else:
            infile = gmos.gsskysub.outpref + gmos.gstransform.outpref + \
                    gmos.gsreduce.outpref
            infile += '-' + cluster.replace(' ', '_') + '_mask' + mask
        print('-' * 30)
        print('Calling gsextract')
        print(infile, '-->', end=' ')
        out = gmos.gsextract.outprefix + infile
        print(out)
        delete(out + '.fits')
        gmos.gsextract(infile)
        print('-' * 30)
        return out

    def Cut_spectra(self, cluster, mask, cutdir='spectra', spec='1d'):
        """
        Takes the extracted spectra and copies them to a single folder called
        spectra/ (by default) in the parent folder. All spectra from all objects 
        will be in the same folder. This is in order for the spectra to be ready
        to cross-correlate with xcsao (for this, you need the RVSAO package for 
        IRAF).
        """
        print('-' * 30)
        print('Cutting spectra...')
        makedir(cutdir, overwrite='no')
        spectra = []
        if spec == '1d':
            prefix = gmos.gsextract.outprefix + gmos.gsskysub.outpref + \
                    gmos.gstransform.outprefix + gmos.gsreduce.outpref
        elif spec == '2d':
            prefix = gmos.gsskysub.outpref + gmos.gstransform.outprefix + \
                    gmos.gsreduce.outpref
        filename = os.path.join(cluster.replace(' ', '_'), 'mask'+mask,
                                prefix+'-'+cluster.replace(' ', '_')+'_mask'+mask)
        Nslits = getNslits(filename)
        for i in range(1, Nslits + 1):
            if i < 10:
                out = cutdir + '/' + cluster.replace(' ', '_') + '_' + \
                    mask + '_0' + str(i) + prefix[0]
                delete(out + '.fits')
                iraf.imcopy(filename+'[sci,'+str(i)+']', out, verbose='no')
            else:
                out = cutdir + '/' + cluster.replace(' ', '_') + '_' + \
                    mask + '_' + str(i) + prefix[0]
                delete(out + '.fits')
                iraf.imcopy(filename+'[sci,'+str(i)+']', out, verbose='no')
        print('-' * 30)
        return

    def Cut_apertures(self, infile, outroot, Naps, path='../../spectra'):
        for i in range(Naps):
            iraf.scopy(infile+'[sci,1]',outroot+str(i), apertures=i)
        return

    def MakeBias(self, files=[], date='', logfile='bias.log'):
        """
        The date should be in format "YYYY-MM-DD"

        NOT YET IMPLEMENTED
        """
        for argv in sys.argv:
            if argv[0:9] == 'biasdate=':
                date = argv[9:]
        if argv[0:9] == 'biasfile=':
            return argv[9:]
        if date:
            date2 = date.split('-')
            date2 = date2[0] + date2[1] + date2[2]
        if not files:
            if date:
                ls = glob.glob('*%s*.fits' %date2)
            else:
                ls = glob.glob('*.fits')
            for file in ls:
                head = pyfits.getheader(file)
                try:
                    if head['OBJECT'] == 'Bias' and head['OBSTYPE'] == 'BIAS':
                        files.append(file)
                except KeyError:
                    pass
        print(date)
        if len(files) == 0:
            print('No bias files from the selected date. Exiting')
            exit()
        output = 'bias'
        biaslist = 'biaslist'
        if date:
            biaslist += '_' + date2
            output   += '_' + date2
        outlist = open(biaslist, 'w')
        for bias in files:
            print(bias, file=outlist)
        gmos.gbias('@' + biaslist, output, logfile=logfile, verbose='no')
        return output


tasks = tasks()


#--------------------------------------------------------------------------#


def getScienceFiles(assocfile, mask):
    file = open(assocfile)
    head = '#'
    while head[0] == '#':
        head = file.readline()
    head = head.split()
    scol = head.index('Science')
    mcol = head.index('Mask')
    science = {}
    for line in file:
        if line[0] != '#':
            line = line.split()
            if len(line) >= 7:
                if line[mcol] == mask:
                    science[line[scol]] = int(line[2])
    return science

def getDarks():
    darks = []
    for ls in glob.glob('*.fits'):
        head = pyfits.getheader(ls)
        if head['OBSTYPE'] == 'DARK':
            darks.append(ls[:-5])
    return ','.join(darks)

def getWavelengths(assocfile):
    file = open(assocfile)
    head = '#'
    while head[0] == '#':
        head = file.readline()
    head = head.split()
    wavecol = head.index('Wave')
    waves = []
    for line in file:
        if line[0] != '#':
            line = line.split()
            w = int(line[wavecol])
            if not w in waves:
                waves.append(w)
    return waves

def Copy_MDF(science, cluster, mask):
    head = pyfits.open(science + '.fits')[0].header
    mdffile = head['MASKNAME']
    targetdir = cluster.replace(' ', '_') + '/mask' + mask + '/'
    if not os.path.isfile(targetdir):
        os.system('cp -p ' + mdffile + '.fits ' + targetdir)
    return

def RemovePreviousFiles(name, filetype=''): # Mainly for the flat files
    delete('g' + name + '.fits')
    delete('gs' + name + '.fits')
    if filetype == 'flat':
        delete(name + '_flat.fits')
        delete(name + '_comb.fits')
    return

def getFile(assoc, science, mask=1, obs='science', wave=670):
  assocfile = open(assoc)
  while assocfile.readline()[0] == '#':
    pass
  for line in assocfile:
    if line[0] != '#':
      line = line.split()
      if len(line) < 7:
        continue
      if mask == 'longslit':
        if int(line[2]) == wave and line[4] == science:
          if obs == 'science':
            return line[4]
          if obs == 'flat':
            return line[5]
          if obs == 'arc' or obs == 'lamp':
            return line[6]
          else:
            print('Unknown observation type in getFile(). Exiting')
            exit()
      else:
        if int(line[1]) == mask and \
           int(line[2]) == wave and \
           line[4] == science:
          if obs == 'science':
            return line[4]
          if obs == 'flat':
            return line[5]
          if obs == 'arc' or obs == 'lamp':
            return line[6]
          else:
            print('Unknown observation type in getFile(). Exiting')
            sys.exit()
  return

def getNslits(filename):
  f = pyfits.open(filename + '.fits')
  N =  len(f) - 2
  f.close()
  return N
  
def getNstars(filename):
  fits = pyfits.open(filename + '.fits')
  data = fits[1].data
  N = 0
  priority = data.field('priority')
  for slit in priority:
    if slit == '0':
      N += 1
  fits.close()
  return N

def ReadKey(fitsfile, key):
  head = getheader(fitsfile + '.fits')
  try:
    value = head[key]
  except KeyError:
    return
  return value

def delete(filename):
  ls = glob.glob(filename)
  for filename in ls:
    os.system('rm %s' %filename)
  return

def removedir(dirname):
  try:
    os.rmdir(dirname)
  except OSError:
    try:
      os.chdir(dirname)
    except OSError: # Means that the folder doesn't exist
      return
    os.system('rm *')
    os.chdir('..')
    os.rmdir(dirname)
  return

def makedir(dirname, overwrite='yes'):
    dirs = dirname.split('/')
    for i in range(len(dirs)):
        try:
            os.mkdir(dirs[i])
        except OSError:
            if overwrite == 'no':
                pass
        else:
            os.system('rm -r ' + dirs[i])
            os.mkdir(dirs[i])
        os.chdir(dirs[i])
    for i in range(len(dirs)):
        os.chdir('../')
    return

def write_offsets(inimages, output):
  xoffset = []
  yoffset = []
  for img in inimages:
    head = pyfits.getheader(img)
    xoffset.append(head['XOFFSET'])
    yoffset.append(head['YOFFSET'])
  out = open(output, 'w')
  for i in range(len(xoffset)):
    print(xoffset[i], '\t', yoffset[i], file=out)
  return output

#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#
#--                                                                      --#
#--              The tasks below are used to read parameters             --#
#--             from the parameter file and the command line             --#
#--                                                                      --#
#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#

def ReadParameters():
    align, cut, masks, program = default_params()

    if 'align+' in sys.argv:
        align = True
    elif 'align-' in sys.argv:
        align = False
    if 'cut+' in sys.argv:
        cut = True
    elif 'cut-' in sys.argv:
        cut = False

    # is the object defined without the "object=" prefix?
    if len(sys.argv) == 1:
        msg = 'Please introduce the name of the object you will be working with: '
        cluster = raw_input(msg)
    if (len(sys.argv) == 2 or '=' not in sys.argv[1]) and sys.argv[1][0] != '-':
        cluster = sys.argv[1].replace('?', ' ')
    else:
        for i in range(2, len(sys.argv)):
            if sys.argv[i][0] != '-' and '=' not in sys.argv[i]:
                cluster = sys.argv[i].replace('?', ' ')
                break

    align_suffix = ''
    cutdir = 'spectra'
    for argv in sys.argv:
        if argv[0:7].lower() == 'object=':
            cluster = argv[7:].replace('?', ' ')
        # the latter is the case for longslit observations
        if argv[0:5].lower() == 'mask=':
            if argv[5:].lower() in ['longslit', 'long', 'ls']:
                masks = 'longslit'
            else:
                masks = argv[5:].split(',')
                # eliminate all zeros in front of numbers if included.
                for i in range(len(masks)):
                    while masks[i][0] == '0':
                        masks[i] = masks[i][1:]
        if argv[0:13].lower() == 'align-suffix=':
            align = '_' + argv[13:]
        if argv[0:7].lower() == 'cutdir=':
            cutdir = argv[7:]
        if argv[0:8].lower() == 'program=':
            program = argv[8:]
    if align_suffix == '' and not 'align-' in sys.argv:
        align_suffix = '_aligned'

    return cluster, align, align_suffix, masks, cutdir, program


def ReadIRAFParams():
  """
  Read parameter definitions from the parameter file
  """
  # is a parameter filename specified? If not, use default filename
  if '-p' in sys.argv:
    argv = sys.argv
    j = argv.index('-p')
    paramFile = argv[j + 1]
  else:
    paramFile = 'pygmos.param'
  print('Reading parameters from %s\n' %paramFile)

  pFile = open(paramFile)
  for line in pFile:
    if line[0] == '@':
      task = line.split()[0][1:]
      task = getattr(iraf, task)
    if '=' in line and line[0] != '#':
      line = line.split()
      try:
        if line[2] == '#':
          task.setParam(line[0], '')
        else:
          task.setParam(line[0], line[2])
      except IndexError:
        task.setParam(line[0], '')
  if gmos.gswavelength.coordlist[0] not in ('/','$') and \
    gmos.gswavelength.coordlist[:2] != '{$' and \
    gmos.gswavelength.coordlist[:6] != '../../':
    gmos.gswavelength.coordlist = '../../' + gmos.gswavelength.coordlist
  return

#--------------------------------------------------------------------------#
def intro():
  print()
  print('  ', '-' * 74)
  print('  ', '-' * 74)
  print()
  print('\t\t################################################')
  print('\t\t#                                              #')
  print('\t\t#                    PyGMOS:                   #')
  print('\t\t#                                              #')
  print('\t\t#  PyRAF-GMOS reduction pipeline developed by  #')
  print('\t\t#                Cristóbal Sifón               #')
  print('\t\t#      at P. Universidad Católica de Chile     #')
  print('\t\t#                                              #')
  print('\t\t#               current address:               #')
  print('\t\t#        Leiden Observatory, Leiden, NL        #')
  print('\t\t#           sifon@strw.leidenuniv.nl           #')
  print('\t\t# -------------------------------------------- #')
  print('\t\t#                 January, 2011                #')
  print('\t\t#            Last Updated April, 2013          #')
  print('\t\t#                                              #')
  print('\t\t################################################')
  print()
  print('  ', '-' * 74)
  print('  ', '-' * 74)
  print()
  return
#--------------------------------------------------------------------------------------------------#

if __name__ == '__main__':
  t0 = time.time()
  main()
  print('\nTotal execution time %.1f min' %((time.time() - t0) / 60))
